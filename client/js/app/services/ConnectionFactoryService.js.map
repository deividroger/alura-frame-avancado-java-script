{"version":3,"sources":["../../app-es6/services/ConnectionFactoryService.js"],"names":["stores","version","dbName","connection","close","ConnectionFactoryService","Error","Promise","resolve","reject","OpenRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;gDAECC,wB;AAET,oDAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,yDAAyBU,aAAzB,CAAuCC,EAAEC,MAAF,CAASC,MAAhD;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,2CAAV,CAAN;AACH,qCAFD;AAIH;;AAEDE,wCAAQL,UAAR;AACH,6BAdD;;AAgBAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAKH,yBA7BM,CAAP;AA8BH;;;kDACoBtB,U,EAAY;AAC7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEjD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEH,yBALD;AAMH;;;sDAEuB;AACpB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactoryService.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraFrame';\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactoryService {\n\n    constructor() {\n        throw new Error('Não é possível criar instâncias de ConnectionFactoryService ')\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let OpenRequest = window.indexedDB.open(dbName, version);\n\n            OpenRequest.onupgradeneeded = e => {\n                ConnectionFactoryService._createStores(e.target.result);\n            };\n\n            OpenRequest.onsuccess = e => {\n\n                if (!connection) {\n                    connection = e.target.result;\n\n                    close = connection.close.bind(connection);\n\n                    connection.close = function(){\n                        throw new Error('Você não pode fecha diretamente a conexão');\n                    }\n\n                }\n\n                resolve(connection);\n            };\n\n            OpenRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n\n        });\n    }\n    static _createStores(connection) {\n        stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, { autoIncrement: true });\n\n        });\n    }\n\n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n}"]}